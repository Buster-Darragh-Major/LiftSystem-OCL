-- Project Lift System SOFTENG 751 - 5/10/2019
-- Written by Buster Major and Nathan Cairns

model LiftSystem

---- CLASSES ----

enum FloorButtonDirection {up, down}
enum Movement {upward, downward, idle}

class Building
attributes
    fireAlarm : Boolean
operations
    engageFireAlarm()
    disengageFireAlarm()
end

class Floor
attributes
    level : Integer
    label : String
    buttons: Set(FloorButtonDirection)
operations
    pressFloorButton(direction : FloorButtonDirection)
end

class Lift
attributes
    level : Integer
    doorsClosed : Boolean
    jobMovement : Movement
    physicalMovement : Movement
    jobs : Set(Floor)
    lockDoor : Boolean
    movementLocked : Boolean
operations
    pressLiftButton(label : String)
    openDoor()
    closeDoor()
    engageEmergencyBreak()
    unlockDoor()
    unlockMovement()
end

---- ASSOCIATIONS ----

association CanGoToFloor between
    Lift[0..*] role lift
    Floor[0..*] role floorOptions
end

association CanCallLift between
    Floor[0..*] role _floor
    Lift[0..*] role liftOptions
end

association Floors between
    Building[1] role buildingFloorOwner
    Floor[2..*] role floorsInBuilding
end

association Lifts between
    Building[1] role buildingLiftOwner
    Lift[1..*] role liftsInBuilding
end

constraints

---- INVARIANTS ----

context Lift
    inv doorsMustBeClosedToMove:
        not(physicalMovement=Movement::idle)implies(doorsClosed=true)
    inv lockedDoorCantOpen:
        (lockDoor)implies(doorsClosed=true)
    inv cantMoveIfLocked:
        (movementLocked)implies(jobMovement=Movement::idle and physicalMovement=Movement::idle and jobs=Set{})

context Building
    inv topLevelCanOnlyGoDown :
        floorsInBuilding->forAll(
            floor1 : Floor |
            not(floorsInBuilding->exists(floor2 : Floor | floor2.level > floor1.level))
            implies
            (floor1.buttons=Set{FloorButtonDirection::down})
        )
    inv bottomLevelCanOnlyGoUP :
        floorsInBuilding->forAll(
            floor1 : Floor |
            not(floorsInBuilding->exists(floor2 : Floor | floor2.level < floor1.level))
            implies
            (floor1.buttons=Set{FloorButtonDirection::up})
        )
    inv middleFloorCanGoUpAndDown :
        floorsInBuilding->forAll(
            floor1 : Floor |
            (floorsInBuilding->exists(floor2 : Floor | floor2.level > floor1.level)
                and floorsInBuilding->exists(floor3 : Floor | floor3.level < floor1.level)
            )
            implies
            (floor1.buttons=Set{FloorButtonDirection::down, FloorButtonDirection::up})
        )

-- TODO: what happens when you press a floor button
-- TODO: 'tick' operation (per lift)?
-- v nice to haves v
-- TODO: lift failure? lift taken out of service so remove from all floors options

---- METHODS ----

context Lift::pressLiftButton(label : String)
    pre floorLabelExists: floorOptions->exists(_floor : Floor | _floor.label = label)
    pre floorIsAboveIfUpwards:
        (jobMovement=Movement::upward)
        implies
        (floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level >= level))
    pre floorIsBelowIfDownwards:
        (jobMovement=Movement::downward)
        implies
        (floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level <= level))
    post addFloorToJobQueue:
        not(floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level = level))
        implies
        (jobs->exists(_floor : Floor | _floor.label = label and floorOptions->includes(_floor)))
    post onSameLevelOpenDoors:
        ((floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level = level))
            and
            (physicalMovement=Movement::idle)
        )
        implies
        (doorsClosed=false)

context Lift::openDoor()
    pre checkNotMoving: physicalMovement=Movement::idle
    post openDoor: doorsClosed=false

context Lift::closeDoor()
    post openDoor: doorsClosed=true

-- Emergency methods

context Lift::engageEmergencyBreak()
    post liftIsStopped : jobMovement=Movement::idle and physicalMovement=Movement::idle and jobs=Set{}
    post doorIsClosed : doorsClosed=true
    post engageLock : lockDoor=true and movementLocked=true

context Lift::unlockDoor()
    post disengageLock : lockDoor=false

context Lift::unlockMovement()
    post disengageMovementLock : movementLocked=false

context Building::engageFireAlarm()
    post fireAlarmIsOn : fireAlarm=true
    post allLiftsNotMoving :
        liftsInBuilding->forAll(
            lift : Lift | lift.jobMovement=Movement::idle
            and
            lift.physicalMovement=Movement::idle
            and
            lift.jobs=Set{}
        )
    post allLiftDoorsOpen :
        liftsInBuilding->forAll(lift : Lift | lift.lockDoor=false and lift.doorsClosed=false)
    post lockLiftMovement :
        liftsInBuilding->forAll(lift : Lift | lift.movementLocked=true)

context Building::disengageFireAlarm()
    post fireAlarmIsOff : fireAlarm=false
    post allLiftsUnlocked :
        liftsInBuilding->forAll(lift : Lift | lift.movementLocked=false)
