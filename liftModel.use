-- Project Lift System SOFTENG 751 - 5/10/2019
-- Written by Buster Major and Nathan Cairns

model LiftSystem

-- Classes

enum FloorButtonDirection {up, down}
enum Movement {upward, downward, idle}

class Floor
attributes
    level : Integer
    label : String
operations
    pressFloorButton(direction : FloorButtonDirection)
end

class Lift
attributes
    level : Integer
    doorsClosed : Boolean
    jobMovement: Movement
    physicalMovement: Movement
    jobs: Set(Floor)
operations
    pressLiftButton(label : String)
    openDoor()
    closeDoor()
end

association CanGoToFloor between
    Lift[0..*] role lift
    Floor[0..*] role floorOptions
end

association CanCallLift between
    Floor[0..*] role _floor
    Lift[0..*] role liftOptions
end

-- Constraints

constraints

context Lift
    inv doorsMustBeClosedToMove:
        not(self.physicalMovement=Movement::idle)implies(self.doorsClosed=true)

-- TODO: what appends when you press a lift button
-- TODO: what happens when you press a floor button
-- TODO: close door function
-- TODO: 'tick' operation (per lift)?
-- TODO: lift failure? lift taken out of service so remove from all floors options

context Lift::pressLiftButton(label : String)
    pre floorLabelExists: floorOptions->exists(_floor : Floor | _floor.label = label)
    pre floorIsAboveIfUpwards:
        (jobMovement=Movement::upward)
        implies
        (floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level >= level))
    pre floorIsBelowIfDownwards:
        (jobMovement=Movement::downward)
        implies
        (floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level <= level))
    post addFloorToJobQueue:
        not(floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level = level))
        implies
        (jobs->exists(_floor : Floor | _floor.label = label and floorOptions->includes(_floor)))
    post onSameLevelOpenDoors:
        ((floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level = level))
            and
            (physicalMovement=Movement::idle))
        implies
        (doorsClosed=false)

context Lift::openDoor()
    pre checkNotMoving: physicalMovement=Movement::idle
    post openDoor: doorsClosed=false

context Lift::closeDoor()
    post openDoor: doorsClosed=true