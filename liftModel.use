-- Project Lift System SOFTENG 751 - 5/10/2019
-- Written by Buster Major and Nathan Cairns

model LiftSystem

-- Classes

enum FloorButtonDirection {up, down}
enum Movement {upward, downward, idle}

class Building
operations
end

class Floor
attributes
    level : Integer
    label : String
    buttons: Set(FloorButtonDirection)
operations
    pressFloorButton(direction : FloorButtonDirection)
end

class Lift
attributes
    level : Integer
    doorsClosed : Boolean
    jobMovement: Movement
    physicalMovement: Movement
    jobs: Set(Floor)
operations
    pressLiftButton(label : String)
    openDoor()
    closeDoor()
end

-- Associations

association CanGoToFloor between
    Lift[0..*] role lift
    Floor[0..*] role floorOptions
end

association CanCallLift between
    Floor[0..*] role _floor
    Lift[0..*] role liftOptions
end

association Floors between
    Building[1] role buildingFloorOwner
    Floor[2..*] role floorsInBuilding
end

association Lifts between
    Building[1] role buildingLiftOwner
    Lift[1..*] role liftsInBuilding
end

-- Constraints

constraints

-- Invariants

context Lift
    inv doorsMustBeClosedToMove:
        not(physicalMovement=Movement::idle)implies(doorsClosed=true)

context Building
    inv topLevelCanOnlyGoDown:
        floorsInBuilding->forAll(floor1 : Floor |
            not(floorsInBuilding->exists(floor2 : Floor | floor2.level > floor1.level))
            implies
            (floor1.buttons=Set{FloorButtonDirection::down}))
    inv bottomLevelCanOnlyGoUP:
        floorsInBuilding->forAll(floor1 : Floor |
            not(floorsInBuilding->exists(floor2 : Floor | floor2.level < floor1.level))
            implies
            (floor1.buttons=Set{FloorButtonDirection::up}))
    inv middleFloorCanGoUpAndDown:
        floorsInBuilding->forAll(floor1 : Floor |
            (floorsInBuilding->exists(floor2 : Floor | floor2.level > floor1.level)
                and floorsInBuilding->exists(floor3 : Floor | floor3.level < floor1.level))
            implies
            (floor1.buttons=Set{FloorButtonDirection::down, FloorButtonDirection::up}))

-- TODO: what happens when you press a floor button
-- TODO: 'tick' operation (per lift)?
-- v nice to haves v
-- TODO: lift failure? lift taken out of service so remove from all floors options
-- TODO: Emergency break button - stop on current floor and lock door.
-- TODO: Fire alarm - same as emergency break but can open door - could do across all lifts - need a building object or something

-- Methods

context Lift::pressLiftButton(label : String)
    pre floorLabelExists: floorOptions->exists(_floor : Floor | _floor.label = label)
    pre floorIsAboveIfUpwards:
        (jobMovement=Movement::upward)
        implies
        (floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level >= level))
    pre floorIsBelowIfDownwards:
        (jobMovement=Movement::downward)
        implies
        (floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level <= level))
    post addFloorToJobQueue:
        not(floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level = level))
        implies
        (jobs->exists(_floor : Floor | _floor.label = label and floorOptions->includes(_floor)))
    post onSameLevelOpenDoors:
        ((floorOptions->exists(_floor: Floor | _floor.label=label and _floor.level = level))
            and
            (physicalMovement=Movement::idle))
        implies
        (doorsClosed=false)

context Lift::openDoor()
    pre checkNotMoving: physicalMovement=Movement::idle
    post openDoor: doorsClosed=false

context Lift::closeDoor()
    post openDoor: doorsClosed=true