-- Script generated by USE 5.1.0

!new Floor
!new Building
!new Floor
!new Floor
!new Lift
!new Lift
!insert (Building1,Lift1) into Lifts
!insert (Building1,Lift2) into Lifts
!insert (Building1,Floor1) into Floors
!insert (Building1,Floor2) into Floors
!insert (Building1,Floor3) into Floors
!insert (Floor1,Lift1) into CanCallLift
!insert (Lift1,Floor1) into CanGoToFloor
!insert (Floor1,Lift2) into CanCallLift
!insert (Lift2,Floor1) into CanGoToFloor
!insert (Floor2,Lift1) into CanCallLift
!insert (Lift1,Floor2) into CanGoToFloor
!insert (Floor3,Lift1) into CanCallLift
!insert (Lift1,Floor3) into CanGoToFloor
!insert (Floor2,Lift2) into CanCallLift
!insert (Lift2,Floor2) into CanGoToFloor
!insert (Floor3,Lift2) into CanCallLift
!insert (Lift2,Floor3) into CanGoToFloor
!Floor1.level := 1
!Floor1.label := 'B'
!Floor1.buttons := Set {FloorButtonDirection::up}
!Floor1.waitingFor := Movement::idle
!Floor2.level := 2
!Floor2.label := 'G'
!Floor2.buttons := Set {FloorButtonDirection::up,FloorButtonDirection::down}
!Floor2.waitingFor := Movement::idle
!Floor3.level := 3
!Floor3.label := '1'
!Floor3.buttons := Set {FloorButtonDirection::down}
!Floor3.waitingFor := Movement::idle
!Lift1.level := 1
!Lift1.doorsClosed := true
!Lift1.jobMovement := Movement::idle
!Lift1.jobs := Set {}
!Lift1.lockDoor := false
!Lift1.movementLocked := false
!Lift2.level := 1
!Lift2.doorsClosed := true
!Lift2.jobMovement := Movement::idle
!Lift2.jobs := Set {}
!Lift2.lockDoor := false
!Lift2.movementLocked := false
!Building1.fireAlarm := false

-- Floor with lift on level has the lift get itself put on its queue, for demonstration purposes do a lift tick and show lift doors opening
!openter Floor1 pressFloorButton(FloorButtonDirection::up)
!Lift1.jobs := Set {Floor1}
!opexit
!openter Lift1 tick()
!Lift1.doorsClosed := false
!Lift1.jobs := Set {}
!opexit
check


-- Setup a lift on level 2 and one on level 1, if floor 3 requests a lift only lift on level 2 should have its queue added to
!Lift1.level := 2
!openter Floor3 pressFloorButton(FloorButtonDirection::down)
!Lift1.jobs := Set {Floor3}
!opexit
check


-- Building on previous example, not lift on level 2 is completing a job downwards so should not be called by level 3, instead level 3 job should go to lift on level 1
!Lift1.jobMovement := Movement::downward
!Lift1.jobs := Set {Floor1}
!openter Floor3 pressFloorButton(FloorButtonDirection::down)
!Lift2.jobs := Set {Floor3}
!opexit
check


-- Lift 1 is on level 3 and idle, lift 2 is on level 1 and moving upward, lift 2 requests upward, either one of lift 1 or lift 2 can be called
!Lift1.jobs := Set {}
!Lift1.level := 3
!Lift1.jobMovement := Movement::idle
!Lift2.jobMovement := Movement::upward
!Lift1.doorsClosed := true
!openter Floor2 pressFloorButton(FloorButtonDirection::up)
!Lift1.jobs := Set {Floor2}
!opexit
check


-- In the case where no lifts are abe to server the floor the floor then puts the job request in its local job queue.
!Lift1.level := 1
!Lift1.jobMovement := Movement::downward
!Lift1.jobs := Set {}
!Lift2.level := 1
!Lift2.jobMovement := Movement::downward
!Lift2.jobs := Set {}
!openter Floor2 pressFloorButton(FloorButtonDirection::up)
!Floor2.waitingFor := Movement::upward
!opexit
check